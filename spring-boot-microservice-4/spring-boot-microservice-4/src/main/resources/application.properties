spring.application.name=eureka-server
server.port=6666

eureka.client.service-url.defaultZone=http://localhost:${server.port}/eureka/

## logging
logging.level.org.springframework.security=INFO
logging.pattern.console=%d{dd-MM-yyyy HH:mm:ss} %magenta([%thread]) %highlight(%-5level) %logger.%M - %msg%n

spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:8080/realms/Microservices_Course_Project
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/Microservices_Course_Project
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

spring.security.oauth2.client.registration.keycloak.client-id=microservices_rest_api
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid

jwt.auth.converter.principle-attribute=preferred_username
jwt.auth.converter.resource-id=microservices_rest_api

#spring.security.oauth2.client.registration.external.provider=Microservices_Course_Project
#spring.security.oauth2.client.registration.external.client-name=microservices Rest api
#spring.security.oauth2.client.registration.external.client-id=microservices_rest_api

#spring.security.oauth2.client.registration.external.client-secret=(put your client secret here)
#spring.security.oauth2.client.registration.external.scope=openid,offline_access,profile
#spring.security.oauth2.client.registration.external.authorization-grant-type=authorization_code

eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false


